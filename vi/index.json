[{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/","title":"Xây dựng hệ thống FoodApp với kiến trúc High Availability","tags":[],"description":"","content":"Xây dựng hệ thống FoodApp với kiến trúc High Availability Tổng quan Trong bài lab này, chúng ta sẽ xây dựng hệ thống FoodApp được triển khai trên AWS theo kiến trúc multi-tier, highly available, auto scalable\nNội dung Giới thiệu Chuẩn bị Hạ tầng AWS Lưu trữ hình ảnh với S3 Thiết lập gửi email với Amazon SES Triển khai DocumentDB Triển khai Backend Triển khai Frontend Dọn dẹp tài nguyên "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.1-connectservice/","title":"Cấu hình kết nối với AWS Services","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ cấu hình kết nối giữa ứng dụng Node.js và các dịch vụ AWS bao gồm:\nAmazon S3: dùng để lưu trữ hình ảnh Amazon SES: dùng để gửi email tự động Cấu hình kết nối Node.js với Amazon S3 Cài đặt AWS SDK npm install aws-sdk Cấu hình AWS SDK trong Node.js Tạo một file s3.config.js trong thư mục cấu hình của bạn để cài đặt kết nối với S3.\nimport AWS from \u0026#39;aws-sdk\u0026#39;; import dotenv from \u0026#39;dotenv\u0026#39;; const s3 = new AWS.S3({ accessKeyId: process.env.ACCESSKEYID, secretAccessKey: process.env.SECRETACCESSKEY, region: process.env.REGION, }); export default s3; Tạo middleware để xử lý việc upload hình ảnh lên S3 Chúng ta sẽ sử dụng multer và multer-s3 để xử lý việc tải lên hình ảnh lên S3. Bạn sẽ cần cài đặt multer và multer-s3:\nnpm install multer multer-s3 Tạo một file middleware uploadFiles.js để xử lý việc upload:\nimport multer from \u0026#39;multer\u0026#39;; import multerS3 from \u0026#39;multer-s3\u0026#39;; import s3 from \u0026#39;../configs/s3.config.js\u0026#39;; const upload = multer({ storage: multerS3({ s3: s3, bucket: \u0026#39;orderingfood-images\u0026#39;, contentType: multerS3.AUTO_CONTENT_TYPE, metadata: (req, file, cb) =\u0026gt; { cb(null, { fieldName: file.fieldname }); }, key: (req, file, cb) =\u0026gt; { const fileName = `${Date.now()}-${file.originalname}`; cb(null, fileName); // Tạo tên file duy nhất }, }), }); const uploadFiles = (req, res, next) =\u0026gt; { upload.single(\u0026#39;image\u0026#39;)(req, res, (err) =\u0026gt; { if (err) { return res.status(400).json({ success: false, message: \u0026#39;Lỗi trong quá trình upload hình ảnh.\u0026#39;, error: err.message, }); } next(); // Tiếp tục với các bước tiếp theo }); }; export default uploadFiles; orderingfood-images là tên bucket trên S3\nCấu hình kết nối Node.js với Amazon SES Để sử dụng SES cho việc gửi email, chúng ta cũng sẽ sử dụng AWS SDK for JavaScript.\nCài đặt AWS SDK và Nodemailer npm install aws-sdk nodemailer Cấu hình SES và Nodemailer Tạo một file mail.config.js để cấu hình SES và Nodemailer:\nimport dotenv from \u0026#39;dotenv\u0026#39;; import AWS from \u0026#39;aws-sdk\u0026#39;; import nodemailer from \u0026#39;nodemailer\u0026#39;; dotenv.config(); AWS.config.update({ accessKeyId: process.env.ACCESS_KEY_ID, secretAccessKey: process.env.SECRET_ACCESS_KEY, region: process.env.REGION, }); const ses = new AWS.SES({ apiVersion: \u0026#39;2010-12-01\u0026#39; }); export const transporter = nodemailer.createTransport({ SES: { ses, aws: AWS }, }); export const MAIL_CONFIG = { FROM_EMAIL: process.env.SES_FROM_EMAIL, }; Sử dụng Nodemailer với SES để gửi email Sử dụng transporter từ Nodemailer để gửi email thông qua SES. Đoạn mã dưới đây là ví dụ về cách gửi email: import { transporter, MAIL_CONFIG } from \u0026#39;../configs/mail.config.js\u0026#39;; const sendMail = async ({ to, subject, html }) =\u0026gt; { const mailData = { from: MAIL_CONFIG.FROM_EMAIL, to, subject, html, }; try { const info = await transporter.sendMail(mailData); console.log(\u0026#39;Email sent:\u0026#39;, info.messageId); return { from: info.envelope.from, to: info.envelope.to, subject, html, }; } catch (error) { console.error(\u0026#39;Error sending email:\u0026#39;, error); throw error; } }; "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/1-introduction/","title":"Giới thiệu","tags":[],"description":"","content":"Tài liệu này hướng dẫn triển khai hệ thống FoodApp – Web đặt đồ ăn trên nền tảng điện toán đám mây AWS theo kiến trúc Highly Available và Auto Scaling. Mục tiêu là xây dựng một hệ thống:\nCó khả năng mở rộng tự động khi lưu lượng tăng Luôn sẵn sàng (high availability), đảm bảo uptime Theo dõi, log truy cập theo thời gian thực Chi phí tối ưu với các dịch vụ trả theo mức sử dụng Mục tiêu triển khai Frontend được phục vụ từ Amazon S3 và CloudFront để tối ưu tốc độ truy cập Backend Node.js triển khai trên EC2, mở rộng tự động bằng Auto Scaling Group Dữ liệu lưu trữ trong Amazon DocumentDB (tương thích MongoDB) Ảnh lưu trữ trong Amazon S3 Gửi email xác thực, đơn hàng qua Amazon SES Theo dõi log truy cập frontend bằng CloudFront Real-time Logging qua Kinesis Data Stream Kiến trúc tổng thể bao gồm: Frontend: S3 Static Website Hosting + CloudFront CDN Backend Node.js: EC2 + PM2, mở rộng qua Auto Scaling Group Database: Amazon DocumentDB Lưu trữ ảnh: Amazon S3 Email service: Amazon SES Log \u0026amp; Monitoring: CloudFront Real-time Logging Kinesis Data Stream CloudWatch (cho backend) Các dịch vụ AWS sử dụng Networking:\nAmazon VPC, Subnet, Route Table Internet Gateway, NAT Gateway Security Groups Compute:\nAmazon EC2, Launch Template Auto Scaling Group Storage \u0026amp; CDN:\nAmazon S3 Amazon CloudFront Database:\nAmazon DocumentDB (MongoDB compatible) Messaging \u0026amp; Logging:\nAmazon SES Amazon Kinesis Data Stream CloudFront Real-time Logging CloudWatch Logs IAM \u0026amp; Security:\nIAM Role, IAM Policies Security Groups Mã nguồn tham khảo Bạn có thể sử dụng mã nguồn mẫu tại:\nBackend Node.js: OrderingFood_Server Frontend ReactJS: OrderingFood-Client Tài liệu này thiết kế theo từng bước triển khai thực tế, từ cấu hình hạ tầng, tạo VPC, đến deploy ứng dụng, cấu hình log real-time và tối ưu hệ thống.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/5-documentdb/5.1-subnetgroup/","title":"Tạo Subnet Group","tags":[],"description":"","content":"Trước khi tạo DocumentDB Cluster, chúng ta cần khai báo một Subnet Group – đây là tập hợp các subnet trong một VPC mà DocumentDB có thể triển khai các instance.\nViệc sử dụng Subnet Group cho phép DocumentDB:\nTự động phân phối các node vào các Availability Zone khác nhau (HA – High Availability) Giới hạn việc triển khai vào các subnet bảo mật (Private Subnet), ngăn truy cập trực tiếp từ Internet Trong hệ thống FoodApp, chúng ta sẽ tạo một Subnet Group gồm subnet-private-1 và subnet-private-2 để đảm bảo DocumentDB được triển khai trong vùng mạng riêng và an toàn.\nTạo Subnet Group Khởi tạo Subnet group Truy cập Amazon DocumentDB Chọn tab Subnet groups Nhấn Create Cấu hình Subnet Group và hoàn tất Name:docdb-subnet-group Description: DocumentDB subnet group for FoodApp VPC: vpc-foodapp Availability zones \u0026amp; subnets: subnet-private-1 (AZ: ap-southeast-1a) subnet-private-2 (AZ: ap-southeast-1b) Nhấn Create để hoàn tất Phải chọn ít nhất 2 subnet thuộc 2 AZ khác nhau để DocumentDB có thể hoạt động trong chế độ High Availability. Nếu chỉ chọn 1 AZ, việc tạo cluster sẽ thất bại.\nSubnet dùng cho DocumentDB phải là Private Subnet và phải có cấu hình Route Table đúng (không có route đi qua Internet Gateway).\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.1-vpcandsubnets/","title":"Tạo VPC và Subnet","tags":[],"description":"","content":"Việc tạo VPC và các Subnet là bước nền tảng để thiết lập kiến trúc mạng cho hệ thống FoodApp. VPC giúp cô lập và kiểm soát các tài nguyên trong một không gian mạng riêng, còn các Subnet cho phép phân chia hạ tầng thành các vùng công khai (Public) và riêng tư (Private). Điều này đảm bảo tính bảo mật, mở rộng và tổ chức hợp lý cho các thành phần như EC2, ALB, DocumentDB,\u0026hellip;\nTrong phần này, ta sẽ tạo:\n1 VPC với CIDR 10.0.0.0/16 2 Public Subnet (cho ALB, EC2 public) 2 Private Subnet (cho DB, backend bảo mật) Tạo VPC Khởi tạo VPC Mở VPC Dashboard trên AWS Console. Chọn Create VPC. Cấu hình VPC Resource to create: chọn VPC only Name tag: nhập vpc-foodapp IPv4 CIDR block: 10.0.0.0/16 Nhấn Create VPC để hoàn tất. Kiểm tra kết quả Sau khi tạo, hệ thống sẽ hiển thị thông báo thành công VPC vừa tạo. Tạo Subnets Khởi tạo subnet Mở VPC Dashboard, chọn tab Subnets. Nhấn Create subnet Cấu hình subnet Public Subnet 1 VPC ID: Chọn vpc-foodapp Subnet name: subnet-public-1 Availability Zone: ap-southeast-1a IPv4 subnet CIDR block: 10.0.1.0/24 Nhấn Create subnet Kiểm tra kết quả Hệ thống hiển thị thông báo thành công Tương tự tạo Public Subnet 2, Private Subnet 1, Private Subnet 2\nPublic Subnet 2 VPC ID: Chọn vpc-foodapp Subnet name: subnet-public-2 Availability Zone: ap-southeast-1b IPv4 subnet CIDR block: 10.0.2.0/24 Private Subnet 1 VPC ID: Chọn vpc-foodapp Subnet name: subnet-private-1 Availability Zone: ap-southeast-1a IPv4 subnet CIDR block: 10.0.11.0/24 Private Subnet 2 VPC ID: Chọn vpc-foodapp Subnet name: subnet-private-2 Availability Zone: ap-southeast-1b IPv4 subnet CIDR block: 10.0.12.0/24 Public Subnet là subnet sẽ được gán Route Table có liên kết với Internet Gateway, còn Private Subnet không có route ra ngoài Internet, dùng cho DB và backend cần bảo mật.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/7-frontend/7.1-s3static/","title":"Triển khai frontend lên Amazon S3","tags":[],"description":"","content":"Amazon S3 cho phép triển khai các ứng dụng frontend tĩnh (HTML, CSS, JS) một cách đơn giản, nhanh chóng và hiệu quả. Trong phần này, ta sẽ:\nTạo bucket S3 để chứa mã nguồn frontend Bật tính năng Static Website Hosting Cấp quyền public để người dùng có thể truy cập Truy cập website thông qua endpoint S3 Sau bước này, bạn sẽ có một website frontend hoạt động công khai, có thể test và kết nối được với backend đang chạy trên Load Balancer.\nCreate bucket Cập nhật biến môi trường Cập nhật API backend thông qua domain HTTPS: https://food.npmhfoodapp.online/ Build frontend với lệnh npm run build Thư mục dist sẽ được tạo ra Khởi tạo bucket Truy cập S3 Nhấn Create bucket Cấu hình bucket Bucket type: Chọn General purpose Bucket name: foodapp-frontend-v1 Bỏ chọn: Block all public access Chọn: I acknowledge that the current settings might result in this bucket and the objects within becoming public Nhấn Create bucket Tải source code lên bucket Chọn bucket vừa tạo Tại tab Objects, chọn Upload Chọn tất cả file trong thư mục dist vừa được tạo ra Nhấn Upload Bật Static Website Hosting Vào bucket, chọn tab Properties Trong mục Static website hosting, chọn Edit Chọn Enable Index document: index.html Error document: index.html Nhấn Save changes Nếu không cấp quyền công khai như trên, người dùng sẽ nhận lỗi Access Denied khi truy cập website. Hãy đảm bảo Block all public access đã được bỏ chọn và bucket policy đã được áp dụng chính xác.\nThiết lập quyền truy cập Chọn tab Permissions Nhấn Edit Thêm đoạn code sau vào policy { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadForWebsite\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::foodapp-frontend-v1/*\u0026#34; } ] } Nhấn Save changes Kiểm tra kết quả Vào tab Properties, sao chép Bucket website endpoint Truy cập DNS endpoint: http://foodapp-frontend-v1.s3-website-ap-southeast-1.amazonaws.com để kiểm tra xem website đã được deploy thành công trên S3 hay chưa. "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/","title":"Chuẩn bị Hạ tầng AWS","tags":[],"description":"","content":"Trước khi triển khai các thành phần backend và frontend của hệ thống FoodApp, chúng ta cần thiết lập một hạ tầng mạng an toàn và chuẩn hóa trên AWS. Chương này sẽ hướng dẫn từng bước cấu hình các thành phần mạng quan trọng để đảm bảo hệ thống có thể mở rộng, bảo mật và hoạt động ổn định.\nCác thành phần được thiết lập bao gồm:\nVPC và Subnet: Tạo môi trường mạng riêng biệt, phân chia Public và Private subnet theo vùng sẵn có (AZ). Internet Gateway và NAT Gateway: Thiết lập kết nối Internet cho các thành phần trong Public và Private subnet. Route Table: Xác định đường đi của lưu lượng mạng đến các gateway tương ứng. Security Groups: Cấu hình tường lửa cấp instance để giới hạn truy cập vào các dịch vụ EC2, ALB, DocumentDB,\u0026hellip; IAM Role: Cấp quyền cho EC2 truy cập các dịch vụ AWS như S3, SES, CloudWatch và DocumentDB. EC2 Instance: Tạo máy chủ backend để xử lý API, giao tiếp với các dịch vụ AWS khác. Sau khi hoàn tất chương này, bạn sẽ có một kiến trúc mạng cơ bản làm nền tảng cho toàn bộ hệ thống được triển khai phía sau.\nTạo VPC và Subnet Tạo Internet Gateway, Elastic IP, NAT Gateway Tạo Route Tables Tạo Security Groups Tạo IAM Role EC2 Tạo EC2 Instance "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/7-frontend/7.2-cloudfront/","title":"Tạo CloudFront Distribution","tags":[],"description":"","content":"Tạo CloudFront Distribution để phân phối nội dung tĩnh của frontend một cách nhanh chóng và bảo mật hơn thông qua mạng lưới CDN toàn cầu của AWS.\nCloudFront sẽ giúp giảm độ trễ tải trang, bảo vệ ứng dụng với HTTPS, đồng thời cho phép kết hợp với S3 để triển khai frontend hiệu quả và linh hoạt hơn.\nTạo CloudFront Distribution Khởi tạo CloudFront Distributions Truy cập dịch vụ CloudFront Chọn tab Distributions Nhấn Create distribution Cấu hình distribution Distribution name: orderingfood-static-frontend Chọn: Single website or app Nhấn Next Origin type: Amazon S3 S3 origin: foodapp-frontend-v1.s3.ap-southeast-1.amazonaws.com Tick chọn: Allow private S3 bucket access to CloudFront - Recommended Nhấn Next Chọn Do not enable security protections Nhấn Next Kiểm tra lại thông tin cấu hình Nhấn Create distribution Cấu hình Default root object Vào tab General của distribution vừa tạo Nhấn Edit Tại trường Default root object, nhập: index.html Nhấn Save changes Tạo Origin Vào tab Origins Nhấn Create origin Tại Origin domain, chọn:\nfoodapp-frontend-v1.s3-website-ap-southeast-1.amazonaws.com Nhấn Create origin Cập nhật Behavior Vào tab Behaviors của distribution Chọn behavior và nhấn Edit Tại mục Origin, chọn lại:\nfoodapp-frontend-v1.s3-website-ap-southeast-1.amazonaws.com Nhấn Save changes Nếu bạn không chọn đúng origin dạng s3-website, website sẽ báo lỗi AccessDenied do S3 mặc định không hỗ trợ giao diện web tĩnh qua API.\nKiểm tra hoạt động của CloudFront Vào tab General của distribution Sao chép Domain name Truy cập domain trên trình duyệt:\nhttps://d1d8ru89vhbyvx.cloudfront.net/ "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/5-documentdb/5.2-documentdb/","title":"Tạo Cluster","tags":[],"description":"","content":"Sau khi đã tạo Subnet Group và cấu hình mạng đầy đủ, bước tiếp theo là khởi tạo DocumentDB Cluster – đây là nơi lưu trữ toàn bộ dữ liệu chính cho hệ thống FoodApp.\nAmazon DocumentDB là dịch vụ cơ sở dữ liệu NoSQL tương thích với MongoDB, được tối ưu cho hiệu năng cao, khả năng mở rộng và độ bền dữ liệu trên nền tảng AWS.\nTrong phần này, ta sẽ:\nTạo một DocumentDB Cluster tên docdb-foodapp với 1 instance chính và 1 replica để đảm bảo tính sẵn sàng Kết nối cluster với EC2 backend (đã tạo trước đó) Cấu hình Subnet Group, Security Group, và thông tin đăng nhập (username/password) Đảm bảo dữ liệu được triển khai trong Private Subnet và chỉ EC2 backend có quyền truy cập Cluster này sẽ là nơi backend thực hiện các thao tác CRUD liên quan đến người dùng, đơn hàng, món ăn, v.v.\nTạo Cluster Khởi tạo Cluster Truy cập Amazon DocumentDB Chọn tab Clusters Nhấn Create Cấu hình Cluster cơ bản Cluster type: Instance-based cluster Cluster identifier: docdb-foodapp Engine version: 5.0.0 Number of regular replica instances: 1 Instance class: db.t3.medium Cấu hình 1 replica giúp tăng tính sẵn sàng (high availability). Khi node chính lỗi, hệ thống có thể tự động failover sang replica.\nThiết lập kết nối Cluster storage configuration: Amazon DocumentDB Standard Connectivity: Connect to an EC2 compute resource EC2 instance: ec2-backend-foodapp Thiết lập xác thực \u0026amp; mạng Authentication:\nusername: Npmh method: Self managed password: ****** Network settings:\nVPC: vpc-foodapp Subnet group: docdb-subnet-group VPC security groups: SG-DOCDB Chỉ nên để DocumentDB trong Private Subnet, tránh truy cập trực tiếp từ Internet để tăng bảo mật.\nTạo Cluster Nhấn Create cluster Thêm Replica Instance Chọn tab Instances, nhấn Add instance Cấu hình Instance identifier: docdb-foodapp2 Instance class: db.t3.medium Nhấn Create "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.2-gateway/","title":"Tạo Internet Gateway, Elastic IP, NAT Gateway","tags":[],"description":"","content":"Để đảm bảo kết nối mạng cho các tài nguyên trong VPC, chúng ta cần thiết lập các thành phần cốt lõi như Internet Gateway và NAT Gateway.\nInternet Gateway (IGW) cho phép các tài nguyên trong Public Subnet (như ALB hoặc EC2 public) truy cập Internet và nhận kết nối từ bên ngoài. NAT Gateway kết hợp với Elastic IP cho phép các tài nguyên trong Private Subnet (như EC2 backend, DocumentDB) gửi request ra Internet (như cập nhật hệ thống, cài đặt gói) mà vẫn giữ được tính riêng tư (không nhận request từ ngoài). Các EC2 trong Private Subnet sẽ không thể kết nối Internet nếu không có NAT Gateway. Điều này rất quan trọng để cài đặt thư viện, cập nhật hệ thống, v.v.\nTạo Internet Gateway Khởi tạo Internet gateway Chọn tab Internet gateways Nhấn Create Internet Gateway. Cấu hình Internet gateway Name tag: igw-foodapp Nhấn Create internet gateway Gắn internet gateway cho vpc Chọn igw-foodapp Nhấn Actions Chọn Attach to VPC Available VPCs: Chọn vpc-foodapp Nhấn Attach internet gateway IGW sẽ chỉ hoạt động khi bạn gán nó vào một VPC cụ thể. Một IGW chỉ gắn được cho một VPC tại một thời điểm.\nTạo Elastic IP (EIP) Khởi tạo Elastic IP Chọn tab Elastic IPs Nhấn Allocate Elastic IP address Cấu hình Elastic IP address Network border group: ap-southeast-1\nThêm tab:\nKey: Name Value: eip-nat-gateway Nhấn Allocate\nKiểm tra kết quả Hệ thống hiển thị thông báo thành công Elastic IP là địa chỉ IPv4 tĩnh được cấp bởi AWS để dùng cho NAT Gateway hoặc EC2. Việc gán tag giúp dễ quản lý.\nTạo NAT Gateway Khởi tạo NAT gateway Chọn tab NAT gateways trong menu bên trái. Nhấn Create NAT gateway. Cấu hình NAT gateway Name: natgw-foodapp Subnet: subnet-public-1 Elastic IP allocation ID: eip-nat-gateway Nhấn Create NAT gateway Kiểm tra kết quả Hệ thống hiển thị thông báo thành công NAT Gateway chỉ được tạo trong Public Subnet. Nếu bạn chọn sai subnet (private), sẽ không hoạt động được.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.2-configurepm2/","title":"Thiết lập PM2","tags":[],"description":"","content":"Sau khi đã tạo EC2 instance và kết nối thành công, bước tiếp theo là triển khai mã nguồn backend và sử dụng PM2 để quản lý tiến trình Node.js.\nPM2 là một process manager dành cho ứng dụng Node.js, giúp:\nChạy ứng dụng ở chế độ nền (background) Tự động khởi động lại nếu EC2 reboot hoặc backend gặp lỗi Quản lý nhiều ứng dụng một cách dễ dàng Trong phần này, ta sẽ:\nClone mã nguồn từ GitHub vào EC2 Cài đặt dependencies và tạo file .env cấu hình biến môi trường Chạy thử bằng node server.js để kiểm tra Cài đặt và cấu hình PM2 để ứng dụng tự động chạy mỗi khi EC2 khởi động lại Thiết lập PM2 Kết nối đến EC2 instance Vào EC2, Chọn Instances Chọn instance ec2-backend-foodapp Nhấn Connect Kết nối bằng Session Manager Chọn tab Session Manager Nhấn Connect Cài đặt môi trường Node.js: Chạy lần lượt các lệnh: sudo apt update sudo apt install -y curl curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt install -y nodejs Cài đặt mã nguồn backend và dependencies node -v cd /home/ssm-user git clone https://github.com/NPMH1909/OrderingFood_Server.git foodapp-backend cd foodapp-backend/ npm install Tạo file .env cấu hình biến môi trường nano .env Chạy server Node.js thủ công để kiểm tra node server.js Cài PM2 để quản lý tiến trình backend npm install -g pm2 pm2 start server.js pm2 save pm2 startup "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/7-frontend/7.3-log/","title":"Kích hoạt CloudFront Logging","tags":[],"description":"","content":"Để theo dõi hoạt động truy cập của người dùng vào frontend thông qua CloudFront, ta sẽ cấu hình logging theo hai cơ chế:\nStandard Logging: gửi log định kỳ vào Amazon S3 Real-time Logging: gửi log thời gian thực đến Kinesis Data Stream để xử lý và phân tích ngay lập tức Trước khi thiết lập Standard Logging, bạn cần tạo sẵn một S3 bucket tên foodapp-cloudfront-logs để CloudFront ghi log.\nCách tạo tương tự như bucket orderingfood-images trong Lưu trữ hình ảnh với S3.\nBucket này sẽ là nơi lưu các file .gz chứa thông tin truy cập, dùng cho phân tích sau này.\nTạo Kinesis Data Stream Khởi tạo Data Stream Truy cập dịch vụ Kinesis từ AWS Console Nhấn Create data stream Cấu hình Data Stream Name: cloudfront-realtime-logs-stream Hoàn tất tạo Data Stream Nhấn Create data stream Kinesis Data Stream phải được tạo ở cùng Region với CloudFront (ví dụ: ap-southeast-1) và cần có quyền ghi (PutRecord) từ CloudFront. Nếu tạo bằng Console mặc định, quyền này sẽ được cấp tự động.\nThiết lập Logging cho CloudFront Khởi tạo Real-time Log Configuration Truy cập dịch vụ CloudFront Chọn tab Logs Chọn tab Real-time log configurations Nhấn Create configuration Cấu hình log và hoàn tất Name: realtimeLogFrontend Sampling rate: 100 (ghi 100% request) Chọn các trường sau trong danh sách Fields: timestamp c-ip cs-method cs-uri-stem sc-status cs(User-Agent) cs(Referer) time-to-first-byte x-edge-result-type Endpoint: chọn cloudfront-realtime-logs-stream Nhấn Create configuration Sampling rate = 100 nghĩa là ghi log cho toàn bộ request. Nếu website có lưu lượng lớn, bạn có thể giảm xuống 50 hoặc 10 để tiết kiệm chi phí.\nCấu hình Standard Log Truy cập Distribution Chọn tab Logging Trong mục Standard log destinations, nhấn Create a log delivery Deliver to: chọn Amazon S3 Destination S3 bucket: arn:aws:s3:::foodapp-cloudfront-logs Nhấn Submit Bucket S3 (foodapp-cloudfront-logs) phải bật quyền ghi log từ CloudFront. Đồng thời log sẽ được lưu dưới dạng .gz, vì vậy cần phải giải nén mới đọc được.\nGán Real-time Log Configuration Trong mục Attached real-time logs, nhấn Edit Bật tùy chọn Enable Log configuration: chọn realtimeLogFrontend Nhấn Save changes Bạn có thể bật/tắt Real-time hoặc Standard Logging bất kỳ lúc nào mà không ảnh hưởng đến hoạt động của CloudFront Distribution.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/3-imagestorage/","title":"Lưu trữ hình ảnh với S3","tags":[],"description":"","content":"Trong hệ thống FoodApp, người dùng có thể tải lên hình ảnh món ăn, hóa đơn hoặc avatar. Để lưu trữ và quản lý các tệp hình ảnh này một cách bền vững và có thể truy cập từ frontend, chúng ta sử dụng dịch vụ Amazon S3.\nAmazon S3 (Simple Storage Service) là dịch vụ lưu trữ đối tượng (object storage) với độ bền cao, chi phí thấp, và dễ tích hợp với các ứng dụng web. Trong phần này, chúng ta sẽ tạo một bucket tên orderingfood-images để:\nLưu trữ các hình ảnh được tải lên từ frontend/backend Cho phép public truy cập ảnh qua URL (vì frontend cần hiển thị) Cấu hình chính sách quyền truy cập (Bucket Policy) cho phù hợp Bucket này sẽ được backend sử dụng để upload ảnh qua SDK, và frontend sẽ load ảnh bằng URL.\nTạo S3 bucket Khởi tạo bucket Truy cập Amazon S3, nhấn Create bucket Chọn Bucket type: General purpose Đặt tên bucket: orderingfood-images Cấu hình quyền truy cập công khai Bỏ chọn Block all public access Chọn I knowledge that the current settings might result\u0026hellip; Tạo bucket Nhấn Create bucket Thiết lập Bucket Policy Chọn tab Permissions, mục Bucket policy chọn Edit Dán đoạn cấu hình JSON sau và nhấn Save changes: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadForObjects\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::orderingfood-images/*\u0026#34; } ] } Việc cho phép public đọc ảnh là cần thiết với ứng dụng frontend, nhưng bạn nên chỉ áp dụng chính sách này với các bucket chứa ảnh tĩnh, không dùng cho tài liệu nhạy cảm.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.3-routetables/","title":"Tạo Route Tables","tags":[],"description":"","content":"Route Table (bảng định tuyến) giúp xác định đường đi của lưu lượng mạng trong VPC. Mỗi subnet phải được gắn với một Route Table để biết nên gửi traffic ra đâu.\nTrong kiến trúc FoodApp, chúng ta cần tạo hai loại bảng định tuyến:\nRoute Table cho Public Subnet: cho phép các subnet công khai truy cập trực tiếp Internet thông qua Internet Gateway Route Table cho Private Subnet: cho phép các subnet riêng tư gửi request ra Internet thông qua NAT Gateway , đồng thời vẫn giữ được tính bảo mật. Phần này sẽ hướng dẫn bạn tạo và cấu hình cả hai bảng định tuyến, cũng như gắn chúng với các subnet tương ứng.\nRoute Table cho Public Subnet Khởi tạo Route table Trong tab Route tables trong menu bên trái Nhấn Create route table Cấu hình Route table Name: rtb-public-foodapp VPC: vpc-foodapp Nhấn Create route table Thêm route Trong tab Routes, chọn Edit routes Nhấn Add route Destination: 0.0.0.0/0 Internet Gateway: igw-foodapp Nhấn Save changes Gắn Subnet Chọn tab Subnet associations Nhấn Edit subnet associations Chọn: subnet-public-1 subnet-public-2 Nhấn Save associations Route Table cho Private Subnet Khởi tạo Route table Chọn tab Route tables trong menu bên trái. Nhấn Create route table Cấu hình Route table Name: rtb-private-foodapp VPC: vpc-foodapp Nhấn Create route table Thêm route Chọn tab Routes Nhấn Edit routes Nhấn Add route Destination: 0.0.0.0/0 NAT Gateway: natgw-foodapp Nhấn Save changes Gắn Subnet Chọn tab Subnet associations Nhấn Edit subnet associations Chọn: subnet-private-1 subnet-private-2 Nhấn Save associations Việc chia subnet ra riêng cho public và private giúp hệ thống của bạn dễ mở rộng và bảo mật tốt hơn, đặc biệt khi triển khai auto scaling hoặc multi-tier.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.3-targetgroup/","title":"Tạo Target Group","tags":[],"description":"","content":"Target Group là tập hợp các backend (ví dụ: EC2 instance) mà Load Balancer sẽ forward request đến. Đây là bước trung gian quan trọng để Load Balancer biết nên gửi request về đâu.\nTrong hệ thống FoodApp, chúng ta sử dụng Target Group để:\nLiên kết Application Load Balancer (ALB) với EC2 backend Cấu hình cổng giao tiếp (5000) cho Node.js backend Thiết lập Health Check để ALB tự động kiểm tra trạng thái hoạt động của backend và chỉ gửi request đến các instance đang healthy Việc thiết lập Target Group đúng cách sẽ đảm bảo hệ thống hoạt động ổn định, tự động loại bỏ các instance không còn phản hồi, và là tiền đề cho việc triển khai Auto Scaling Group ở bước sau.\nTạo Target Group Khởi tạo Target Group Mở giao diện EC2 trên AWS Console Chọn mục Target Groups Nhấn Create target group Cấu hình loại Target Group Target type: chọn Instances Nhập tên: tg-backend Protocol: HTTP, Port: 5000 VPC: chọn vpc-foodapp Thiết lập Health Check Protocol: HTTP Path: /menu/getall Port: traffic port Success code: 200-299 Nhấn Next để tiếp tục Hoàn tất tạo Target Group Ở bước Register targets, chọn EC2 backend cần đưa vào nhóm Nhấn Include as pending below để thêm vào Nhấn Create target group để hoàn tất Kiểm tra kết quả Quay lại tab Target Groups, chọn tg-backend Vào tab Targets, bạn sẽ thấy instance có trạng thái ban đầu là Unused Target Group sẽ chỉ bắt đầu thực hiện Health Check sau khi được liên kết với một Listener của Load Balancer. Trạng thái Healthy sẽ xuất hiện sau khi ALB gửi request thành công đến path /menu/getall và nhận mã phản hồi HTTP 200-299.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.4-alb/","title":"Tạo Application Load Balancer","tags":[],"description":"","content":"Application Load Balancer (ALB) là thành phần chịu trách nhiệm phân phối lưu lượng HTTP/HTTPS từ người dùng đến các EC2 backend, đảm bảo hệ thống ổn định, mở rộng và có khả năng tự động loại bỏ các instance không phản hồi.\nTrong hệ thống FoodApp, ALB giúp:\nNhận request từ Internet qua cổng 80 (HTTP) Chuyển tiếp request đến các EC2 instance trong Target Group tg-backend Kết hợp với Health Check để chỉ gửi request đến các backend \u0026ldquo;healthy\u0026rdquo; Là đầu mối duy nhất người dùng truy cập, giúp backend có thể triển khai trong subnet riêng tư Phần này sẽ hướng dẫn bạn tạo một Application Load Balancer alb-foodapp, gắn với VPC vpc-foodapp, hoạt động trên 2 Public Subnet, sử dụng Security Group SG-ALB và liên kết với Target Group đã tạo trước đó.\nTạo Certificate Khởi tạo yêu cầu cấp chứng chỉ Mở AWS Console và tìm kiếm Certificate Manager. Tại tab List certificates, chọn nút Request để tạo mới. Nhập thông tin tên miền cần cấp chứng chỉ Tại mục Fully qualified domain name, nhập:\nfood.npmhfoodapp.online Giữ mặc định các tùy chọn: Allow export: chọn Disable export Validation method: chọn DNS validation – recommended Key algorithm: RSA 2048 Nhấn Request để tiếp tục gửi yêu cầu. Lấy thông tin xác thực DNS Trạng thái sẽ là Pending validation Sao chép giá trị: CNAME name CNAME value Thêm bản ghi DNS tại trang quản lý tên miền (TenTen.vn) Truy cập địa chỉ: https://domain.tenten.vn Thêm bản ghi CNAME: Loại: CNAME Tên (Name): dán CNAME name Giá trị (Value): dán CNAME value Nhấn Lưu để hoàn tất Chờ xác thực thành công Quay lại giao diện ACM Trạng thái sẽ đổi từ Pending validation sang Issued Tạo Load Balancer Khởi tạo Load Balancer Truy cập dịch vụ EC2 Trong menu bên trái, chọn Load Balancers Nhấn Create load balancer Tại phần loại Load Balancer, chọn Application Load Balancer (ALB) và nhấn Create Cấu hình cơ bản Đặt tên: alb-foodapp Scheme: chọn Internet-facing IP address type: chọn IPv4 Thiết lập mạng (Network Mapping) Chọn VPC: vpc-foodapp Chọn 2 Subnet công khai ở 2 Availability Zone: subnet-public-1 (10.0.1.0/24) subnet-public-2 (10.0.2.0/24) Chọn Security Group: SG-ALB (cho phép cổng 443) Cấu hình HTTPS Listener Protocol: chọn HTTPS Port: 443 Default action: chuyển tiếp tới Target Group tg-backend (port 5000) Chọn chứng chỉ SSL: Certificate source: From ACM Certificate: food.npmhfoodapp.online Security policy: ELBSecurityPolicy-TLS13-1-2-Res-2021-06 (recommended) Xem lại và tạo Load Balancer Kiểm tra toàn bộ cấu hình tại trang Review Nhấn Create load balancer Ghi nhận tên DNS của Load Balancer Sau khi tạo thành công, ghi lại giá trị DNS, ví dụ:\nalb-foodapp-465071925.ap-southeast-1.elb.amazonaws.com Cập nhật bản ghi DNS tại TenTen.vn Truy cập trang quản lý domain: https://domain.tenten.vn Thêm bản ghi CNAME: Tên: food Loại: CNAME Giá trị: alb-foodapp-465071925.ap-southeast-1.elb.amazonaws.com Nhấn Lưu Thời gian cập nhật DNS có thể mất vài phút đến vài giờ để có hiệu lực toàn cầu.\nTruy cập trang web theo domain đã cấu hình: Địa chỉ: https://food.npmhfoodapp.online Trình duyệt sẽ kết nối qua ALB sử dụng giao thức HTTPS và chuyển tiếp đến backend "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.4-securitygroups/","title":"Tạo Security Groups","tags":[],"description":"","content":"Security Group (SG) là tường lửa ảo hoạt động ở cấp độ instance trong Amazon VPC, giúp kiểm soát lưu lượng vào và ra cho các tài nguyên như ALB, EC2, DocumentDB. Việc cấu hình chính xác SG là rất quan trọng để đảm bảo bảo mật, tính kết nối và phân tách trách nhiệm giữa các thành phần.\nTrong hệ thống FoodApp, ta sẽ tạo 3 Security Group:\nSG-ALB: Cho phép truy cập HTTP/HTTPS từ Internet đến Application Load Balancer. SG-EC2: Cho phép ALB gửi request đến EC2 backend qua cổng 5000. SG-DOCDB: Cho phép EC2 backend truy cập DocumentDB (port 27017). Cấu hình SG đúng cách sẽ đảm bảo chỉ có các thành phần được phép mới có thể giao tiếp với nhau, đồng thời ngăn chặn các truy cập không mong muốn từ bên ngoài.\nTạo Security Group cho ALB Khởi tạo Security Group Chọn tab Security Groups Nhấn Create security group Cấu hình Security Group Security group name: SG-ALB Description: ALB security group VPC: vpc-foodapp Inbound rules: Nhấn Add rule Type: HTTP (port 80)\nSource: Anywhere Type: HTTPS (port 443)\nSource: Anywhere Hoàn tất tạo security group Nhấn Create security group Kiểm tra kết quả Hệ thống hiển thị thông báo thành công Tạo Security Group cho EC2 Khởi tạo Security Group Chọn tab Security Groups Nhấn Create security group Cấu hình Security Group Security group name: SG-EC2 Description: EC2 security group VPC: vpc-foodapp Inbound rules: Nhấn Add rule type: Custom TCP\nport: 5000\nsource: Custom – SG-ALB Chỉ nên cho phép ALB truy cập vào backend qua SG, không mở cổng 5000 từ Internet, tránh lộ endpoint trực tiếp.\nHoàn tất tạo security group Nhấn Create security group Kiểm tra kết quả Hệ thống hiển thị thông báo thành công Tạo Security Group cho DocumentDB Khởi tạo Security Group Chọn tab Security Groups Nhấn Create security group Cấu hình Security Group Security group name: SG-DOCDB\nDescription: DOCDB security group\nVPC: vpc-foodapp\nInbound rules:\nNhấn Add rule Type: Custom TCP\nPort: 27017\nSource: Custom – SG-EC2 Chỉ có EC2 backend mới được truy cập DocumentDB, đảm bảo database nằm trong private subnet và không bị tấn công từ ngoài.\nHoàn tất tạo security group Nhấn Create security group 4. Kiểm tra kết quả\nHệ thống hiển thị thông báo thành công Danh sách các Security Groups đã tạo thành công\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/4-emailsending/","title":"Thiết lập gửi email với Amazon SES","tags":[],"description":"","content":"Amazon SES (Simple Email Service) là dịch vụ gửi email linh hoạt, bảo mật và có khả năng mở rộng, được dùng phổ biến trong các hệ thống web. Trong FoodApp, Amazon SES sẽ được dùng để gửi các email như:\nXác nhận đơn hàng Gửi hóa đơn điện tử Gửi mã OTP hoặc thông báo hệ thống Trước khi có thể gửi email từ ứng dụng, chúng ta cần xác thực địa chỉ email gửi đi trong SES để đảm bảo an toàn và uy tín. Phần này sẽ hướng dẫn bạn tạo một email identity, xác minh địa chỉ email và chuẩn bị tích hợp SES vào backend.\nThiết lập Identity Amazon SES Tạo Identity Vào dịch vụ Amazon SES từ giao diện AWS Console Trong tab Identities, chọn Create Identity Cấu hình identity Identity type: Email address Nhập Email address Nhấn Create identity Xác thực địa chỉ email Kiểm tra email và truy cập link được cung cấp để xác thực Sau khi xác minh thành công, trạng thái Identity status sẽ chuyển sang Verified Trong giai đoạn đầu, SES hoạt động ở Sandbox Mode – nghĩa là bạn chỉ có thể gửi email tới các địa chỉ đã được xác thực. Nếu muốn gửi email cho khách hàng thực tế, bạn cần gửi request nâng cấp lên Production.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.5-createami/","title":"Tạo Amazon Machine Image","tags":[],"description":"","content":"Sau khi đã cài đặt và cấu hình đầy đủ backend trên EC2 (bao gồm mã nguồn, file .env, PM2,\u0026hellip;), bước tiếp theo là tạo một bản sao lưu toàn bộ hệ thống hiện tại dưới dạng Amazon Machine Image (AMI).\nAMI sẽ chứa đầy đủ hệ điều hành, ứng dụng backend và các cấu hình hiện tại của EC2. Việc tạo AMI cho phép:\nTriển khai nhiều EC2 backend giống nhau trong Auto Scaling Group (ASG) Đảm bảo tất cả instance backend đều có cùng cấu hình Giảm thời gian cài đặt lại backend thủ công mỗi khi mở rộng hệ thống Trong phần này, chúng ta sẽ tạo AMI ami-backend-foodapp từ instance ec2-backend-foodapp để chuẩn bị cho bước tiếp theo là tạo Launch Template và Auto Scaling Group.\nTạo AMIs Khởi tạo AMI Truy cập AWS EC2 Console, chọn tab Instances từ menu bên trái. Chọn instance ec2-backend-foodapp đang chạy. Nhấn vào nút Actions, chọn Image and templates, sau đó chọn Create image. Nhập thông tin và tạo AMI Tại màn hình Create image, nhập tên AMI là ami-backend-foodapp. Nhấn Create image. Kiểm tra tiến trình tạo AMI Sau khi tạo, AMI sẽ xuất hiện trong tab AMIs. Trạng thái ban đầu là \u0026ldquo;Pending\u0026rdquo;, sau vài phút sẽ chuyển sang \u0026ldquo;Available\u0026rdquo;. "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.5-iamrole/","title":"Tạo IAM Role EC2","tags":[],"description":"","content":"IAM Role là cách an toàn và linh hoạt để cấp quyền cho các dịch vụ AWS như EC2 mà không cần dùng Access Key/Secret Key. Việc gán IAM Role cho EC2 giúp backend có thể:\nTruy cập Amazon DocumentDB để đọc/ghi dữ liệu Gửi log lên CloudWatch Gửi email qua Amazon SES Giao tiếp với SSM (AWS Systems Manager) để dễ quản trị server qua AWS Console Trong phần này, ta sẽ:\nTạo một Custom Policy để cho phép EC2 truy vấn các thông tin cần thiết từ DocumentDB và các dịch vụ liên quan Gán policy đó cùng các quyền khác vào một IAM Role dành cho EC2 Sử dụng IAM Role này khi khởi tạo EC2 backend sau này Tạo Policies Khởi tạo policy Truy cập vào IAM Chọn tab Policies Nhấn Create policy 2. Cấu hình quyền truy cập cho policy\nChọn tab JSON Dán đoạn cấu hình sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;DocumentDBAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;rds:DescribeDBClusters\u0026#34;, \u0026#34;rds:DescribeDBInstances\u0026#34;, \u0026#34;rds:DescribeDBSubnetGroups\u0026#34;, \u0026#34;rds:ListTagsForResource\u0026#34;, \u0026#34;cloudwatch:GetMetricData\u0026#34;, \u0026#34;cloudwatch:ListMetrics\u0026#34;, \u0026#34;cloudwatch:GetMetricStatistics\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34;, \u0026#34;logs:GetLogEvents\u0026#34;, \u0026#34;logs:FilterLogEvents\u0026#34;, \u0026#34;ec2:DescribeSecurityGroups\u0026#34;, \u0026#34;ec2:DescribeSubnets\u0026#34;, \u0026#34;ec2:DescribeVpcs\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Chỉ cần cấp quyền mô tả (Describe) cho RDS và EC2, không cần quyền ghi (Write), để đảm bảo principle of least privilege (nguyên tắc cấp quyền tối thiểu).\nNhấn Next 3. Đặt tên và tạo policy\nNhập tên: CustomDocumentDBAccess Nhấn Create policy 4. Kiểm tra kết quả\nHệ thống hiển thị thông báo thành công Tạo role Khởi tạo IAM Role Chọn tab Roles trong IAM Nhấn Create role Chọn Trusted entity type là AWS service Chọn Use case là EC2 Nhấn Next 2. Gán các policy cần thiết cho role\nTìm và chọn các policy :\nAmazonSSMManagedInstanceCore CloudWatchAgentServerPolicy AmazonS3FullAccess CustomDocumentDBAccess AmazonSESFullAccess Nếu muốn giới hạn quyền S3 hoặc SES, bạn có thể tạo custom policy thay vì dùng FullAccess.\nNhấn Next.\nĐặt tên và tạo role Nhập tên role: EC2-Backend-FoodApp-Role Nhấn Create role 4. Kiểm tra kết quả\nHệ thống hiển thị thông báo thành công IAM Role này sẽ được gán cho EC2 backend khi khởi tạo ở bước tiếp theo để đảm bảo backend có thể giao tiếp an toàn với các dịch vụ như SES, S3, DocumentDB, CloudWatch.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/5-documentdb/","title":"Triển khai DocumentDB","tags":[],"description":"","content":"Amazon DocumentDB là dịch vụ cơ sở dữ liệu NoSQL tương thích MongoDB, được thiết kế để chạy trên AWS với khả năng mở rộng, tính sẵn sàng cao và quản lý đơn giản. Trong hệ thống FoodApp, DocumentDB đóng vai trò là nơi lưu trữ dữ liệu chính như:\nThông tin người dùng Món ăn, đơn hàng Phản hồi đánh giá, thông báo,\u0026hellip; Việc sử dụng DocumentDB giúp backend dễ dàng thao tác với dữ liệu dạng document (JSON), phù hợp với ứng dụng có cấu trúc linh hoạt và khả năng phát triển nhanh.\nTrong chương này, chúng ta sẽ triển khai DocumentDB theo các bước:\nTạo Subnet Group để chỉ định nơi cluster sẽ được triển khai (trong Private Subnet) Tạo DocumentDB Cluster và gắn với VPC, SG, subnet, EC2 backend Cluster sẽ hoạt động trong vùng mạng riêng và chỉ có EC2 backend được cấp quyền truy cập thông qua Security Group, đảm bảo an toàn và bảo mật cho toàn bộ dữ liệu.\nTạo Subnet Group Tạo Cluster "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/2-preparation/2.6-ec2instance/","title":"Tạo EC2 instance","tags":[],"description":"","content":"EC2 instance sẽ đóng vai trò là backend server cho hệ thống FoodApp, xử lý các request từ frontend, tương tác với DocumentDB, gửi email qua Amazon SES và lưu trữ ảnh lên Amazon S3.\nTrong phần này, chúng ta sẽ tạo một EC2 instance có các đặc điểm:\nSử dụng Ubuntu 22.04 LTS để dễ cài đặt môi trường Node.js Đặt trong Private Subnet để đảm bảo bảo mật (chỉ ALB có thể truy cập) Gắn IAM Role (EC2-Backend-FoodApp-Role) để EC2 có quyền gọi các dịch vụ AWS như SES, S3, DocumentDB Gắn Security Group SG-EC2, chỉ cho phép ALB gửi request đến cổng 5000 Sau khi tạo, EC2 sẽ được sử dụng để triển khai mã nguồn backend Node.js của FoodApp.\nTạo EC2 Instance Khởi tạo EC2 Instance Truy cập vào EC2 Dashboard Chọn tab Instances Nhấn Launch instances Cấu hình instance Name: ec2-backend-foodapp Application and OS images: Chọn: Quick Start OS: Ubuntu AMI: Ubuntu Server 22.04 LTS Instance type: t2.micro Key pair: chọn orderingfoodkey Network settings: VPC: chọn vpc-foodapp Subnet: subnet-private-1 Firewall: Select existing security group Common security groups: chọn SG-EC2 Advanced detail: IAM instance profile: chọn EC2-Backend-FoodApp-Role Nhấn Launch instance để hoàn tất IAM Role sẽ cấp quyền cho EC2 backend có thể gửi log, truy vấn DocumentDB, gửi email qua SES, tải ảnh lên S3 mà không cần Access Key.\nKiểm tra kết quả Hệ thống hiển thị thông báo thành công "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.6-launchtemplate/","title":"Tạo Launch Template","tags":[],"description":"","content":"Launch Template là mẫu cấu hình EC2 giúp tự động khởi tạo các instance theo định dạng chuẩn. Đây là bước cần thiết trước khi triển khai Auto Scaling Group, vì ASG sẽ sử dụng template này để tạo ra các backend EC2 mới một cách tự động khi cần mở rộng hoặc thay thế.\nTrong hệ thống FoodApp, Launch Template sẽ sử dụng:\nAMI ami-backend-foodapp đã tạo trước đó Security Group SG-EC2 IAM Role EC2-Backend-FoodApp-Role Tập lệnh User data để tự động khởi động backend bằng PM2 mỗi khi instance mới được tạo Phần này sẽ giúp đảm bảo mọi instance backend được tạo ra đều có cùng cấu hình, sẵn sàng chạy ứng dụng ngay lập tức khi được ALB phân phối lưu lượng\nCreate Launch Templates Khởi tạo Launch tepmlate Truy cập EC2, sau đó chọn mục \u0026ldquo;Launch Templates\u0026rdquo; từ menu bên trái. Nhấn Create launch template Nhập tên và chọn AMI Đặt tên template: lt-backend-foodapp. Trong phần \u0026ldquo;Application and OS Images\u0026rdquo; Chọn tab My AMIs Chọn AMI: ami-backend-foodapp đã tạo trước đó. Cấu hình loại máy chủ (Instance type) Trong mục \u0026ldquo;Instance type\u0026rdquo;, chọn t2.micro. Thiết lập SSH key và bảo mật Chọn SSH Key Pair: orderingfoodkey. Ở mục \u0026ldquo;Firewall (security groups)\u0026rdquo;, chọn SG-EC2. Gán IAM Role Trong phần \u0026ldquo;Advanced details\u0026rdquo;, gán IAM Role EC2-Backend-FoodApp-Role cho instance. Cấu hình User Data khởi tạo lại backend Trong phần \u0026ldquo;User data\u0026rdquo;, thêm đoạn script khởi động tự động server Node.js bằng PM2. Script có tác dụng tự động chạy server ngay khi EC2 được khởi động thông qua Auto Scaling. #!/bin/bash cd /home/ssm-user/foodapp-backend npm install -g pm2 npm install pm2 start server.js pm2 save pm2 startup Tạo template hoàn tất Kiểm tra lại toàn bộ cấu hình bên phải mục \u0026ldquo;Summary\u0026rdquo;. Nhấn Create launch template. Kiểm tra kết quả "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/","title":"Triển khai Backend","tags":[],"description":"","content":"Chương này hướng dẫn triển khai backend của hệ thống FoodApp trên Amazon EC2 theo kiến trúc High Availability. Backend sẽ được triển khai theo từng bước cụ thể để đảm bảo:\nCó thể mở rộng tự động khi lưu lượng tăng (Auto Scaling) Luôn sẵn sàng hoạt động nhờ Load Balancer và Health Check Có khả năng giám sát và phục hồi khi gặp sự cố Các bước trong chương này bao gồm:\nCài đặt backend với PM2 Tạo Target Group \u0026amp; Application Load Balancer (ALB) để phân phối request Tạo AMI \u0026amp; Launch Template giúp khởi tạo các backend EC2 mới dễ dàng Tạo Auto Scaling Group (ASG) để đảm bảo hệ thống backend luôn có số lượng instance phù hợp Sau khi hoàn thành chương này, bạn sẽ có một hệ thống backend Node.js chạy trong môi trường AWS có khả năng mở rộng và tự phục hồi mạnh mẽ.\nCấu hình kết nối với AWS Services Thiết lập PM2 Tạo Target Group Tạo Application Load Balancer Tạo Ami Tạo Launch Template Tạo Auto Scaling Group "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/6-backend/6.7-autoscalinggroup/","title":"Tạo Auto Scaling Group","tags":[],"description":"","content":"Auto Scaling Group (ASG) là thành phần giúp hệ thống backend có khả năng mở rộng tự động theo nhu cầu và tự phục hồi khi có sự cố. Khi kết hợp với Launch Template và Application Load Balancer (ALB), ASG đảm bảo hệ thống luôn có đủ số lượng EC2 backend hoạt động và sẵn sàng xử lý lưu lượng.\nTrong hệ thống FoodApp, Auto Scaling Group giúp:\nTự động tạo EC2 mới từ Launch Template lt-backend-foodapp khi cần Đặt các EC2 vào 2 Private Subnet để tăng tính sẵn sàng (multi-AZ) Tự động gắn các EC2 vào Target Group tg-backend của ALB Tự động kiểm tra trạng thái hoạt động thông qua Health Check của ALB Phần này là bước hoàn thiện cho kiến trúc Highly Available Web Application, đảm bảo backend luôn có thể mở rộng, chịu lỗi và sẵn sàng hoạt động 24/7.\nTạo Auto Scaling Groups Khởi tạo Auto Scaling group Truy cập AWS EC2 Console Chọn tab Auto Scaling groups Nhấn Create Auto Scaling group Cấu hình cơ bản Name: asg-backend-foodapp Launch template: lt-backend-foodapp Chọn version mới nhất Nhấn Next Cấu hình mạng VPC: vpc-foodapp Availability zones \u0026amp; subnets: subnet-private-1 subnet-private-2 Nhấn Next Gắn Load Balancer Load balancing: Attach to an existing load balancer Existing target group: tg-backend Bật tùy chọn: Turn on Elastic Load Balancing health checks Nhấn Skip to review Tạo Auto Scaling Group Nhấn Create Auto Scaling group Kiểm tra kết quả Vào tab Instances, bạn sẽ thấy một EC2 instance mới được Auto Scaling Group (ASG) tự động tạo ra dựa trên Launch Template. Truy cập Target Group, chọn tab Targets để kiểm tra trạng thái Health Check. Đảm bảo rằng instance đang hiển thị trạng thái healthy để xác nhận backend hoạt động bình thường. Bạn có thể mất 1–2 phút để trạng thái chuyển từ initial sang healthy. Hãy kiên nhẫn.\n"},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/7-frontend/","title":"Triển khai Frontend và cấu hình CloudFront Logging","tags":[],"description":"","content":"Sau khi backend đã được triển khai đầy đủ với khả năng mở rộng và giám sát, bước tiếp theo là triển khai giao diện người dùng (frontend) để người dùng có thể tương tác với hệ thống.\nTrong chương này, chúng ta sẽ thực hiện các bước triển khai frontend hoàn chỉnh bao gồm:\nTriển khai mã nguồn frontend lên Amazon S3 sử dụng Static Website Hosting Tạo CloudFront Distribution để tăng tốc và bảo mật truy cập Kích hoạt CloudFront Logging để theo dõi hoạt động truy cập theo thời gian thực và định kỳ Sau chương này, bạn sẽ có một frontend được triển khai công khai, tối ưu hiệu suất, giám sát đầy đủ và có thể tích hợp trọn vẹn với hệ thống backend qua Load Balancer.\nTriển khai frontend lên Amazon S3 Tạo CloudFront Distribution Kích hoạt CloudFront Logging "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/8-cleanup/","title":"Dọn dẹp tài nguyên  ","tags":[],"description":"","content":"Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa Distribute Chọn distribution Nhấn Disable Xác nhận Disable Nhấn Delete Xác nhận Delete Xóa Data stream Chọn data stream Nhấn Actions Chọn Delete Nhập delete Xác nhận Delete Xóa S3 bucket Chọn bucket Nhấn Empty Nhập permanently delete Xác nhận Empty Nhấn Delete Nhập tên bucket Xác nhận Delete bucket Xóa Auto Scaling group Chọn ASG Nhấn Actions Chọn Delete Nhập delete Xác nhận Delete Xóa Launch template Chọn launch template Nhấn Actions Chọn Delete template Nhập delete Xác nhận Delete Xóa Amazon Machine Image Chọn AMI Nhấn Actions Chọn Disable AMI Xác nhận Disable AMI Xóa Elastic Load balancer Chọn load balancer Nhấn Actions Chọn Delete load balancer Nhập confirm Xác nhận Delete Xóa Target group Chọn target group Nhấn Actions Chọn Delete Xác nhận Delete Xóa DocumentDB cluster Chọn cluster Nhấn Actions Chọn Delete Chọn No Xác nhận I acknowledge that upon cluster deletion Nhập delete entire cluster Xác nhận Delete Xóa Subnet group Chọn subnet group Nhấn Actions Chọn Delete Xác nhận Delete Xóa EC2 Instance Chọn instance Nhấn Instance state Chọn Terminate instance Xác nhận Terminate Xóa NAT gateway Chọn nat gateway Nhấn Instance state Chọn Terminate instance 4.Xác nhận Terminate\nXóa Route table Chọn route table Nhấn Actions Chọn Edit subnet associations Bỏ chọn tất cả subnet Nhấn Save associations Nhấn Actions Chọn Delete route table Nhập delete Xác nhận Delete Xóa Internet gateway Chọn internet gateway Nhấn Actions Chọn Detach from VPC Xác nhận Detach internet gateway Nhấn Actions Chọn Delete internet gateway Nhập delete Xác nhận Delete internet gateway Xóa Elastic IP address Chọn eip Nhấn Actions Chọn Release Elastic IP addresses Xác nhận Release Xóa Subnet Chọn subnet Nhấn Actions Chọn Delete subnet Nhập delete Xác nhận Delete Xóa VPC Chọn VPC Nhấn Actions Chọn Delete VPC Nhập delete Xác nhận Delete "},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://npmh1909.github.io/foodapp-high-availability/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]